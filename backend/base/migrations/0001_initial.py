# Generated by Django 5.2 on 2025-04-21 14:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game', models.CharField(choices=[('lol', 'League of Legends'), ('valorant', 'Valorant')], max_length=50)),
                ('password', models.CharField(max_length=100)),
                ('email_verified', models.BooleanField(default=False)),
                ('account_email', models.EmailField(max_length=254)),
                ('account_password', models.CharField(max_length=100)),
                ('email_provider_link', models.URLField(blank=True, null=True)),
                ('changeable_name', models.BooleanField(default=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('price_after_tax', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sold', models.BooleanField(default=False)),
                ('sold_at', models.DateTimeField(blank=True, null=True)),
                ('lol_level_up_method', models.CharField(blank=True, choices=[('manual', 'Manual'), ('botted', 'Botted')], max_length=20, null=True)),
                ('lol_server', models.CharField(blank=True, choices=[('euw', 'EU West'), ('eune', 'EU Nordic & East'), ('na', 'North America'), ('tr', 'Turkey'), ('me', 'Middle East')], max_length=50, null=True)),
                ('lol_solo_rank', models.CharField(blank=True, choices=[('unranked', 'Unranked'), ('iron_1', 'Iron I'), ('iron_2', 'Iron II'), ('iron_3', 'Iron III'), ('iron_4', 'Iron IV'), ('bronze_1', 'Bronze I'), ('bronze_2', 'Bronze II'), ('bronze_3', 'Bronze III'), ('bronze_4', 'Bronze IV'), ('silver_1', 'Silver I'), ('silver_2', 'Silver II'), ('silver_3', 'Silver III'), ('silver_4', 'Silver IV'), ('gold_1', 'Gold I'), ('gold_2', 'Gold II'), ('gold_3', 'Gold III'), ('gold_4', 'Gold IV'), ('platinum_1', 'Platinum I'), ('platinum_2', 'Platinum II'), ('platinum_3', 'Platinum III'), ('platinum_4', 'Platinum IV'), ('emerald_1', 'Emerald I'), ('emerald_2', 'Emerald II'), ('emerald_3', 'Emerald III'), ('emerald_4', 'Emerald IV'), ('diamond_1', 'Diamond I'), ('diamond_2', 'Diamond II'), ('diamond_3', 'Diamond III'), ('diamond_4', 'Diamond IV'), ('master', 'Master'), ('grandmaster', 'Grandmaster'), ('challenger', 'Challenger')], max_length=50, null=True)),
                ('lol_flex_rank', models.CharField(blank=True, choices=[('unranked', 'Unranked'), ('iron_1', 'Iron I'), ('iron_2', 'Iron II'), ('iron_3', 'Iron III'), ('iron_4', 'Iron IV'), ('bronze_1', 'Bronze I'), ('bronze_2', 'Bronze II'), ('bronze_3', 'Bronze III'), ('bronze_4', 'Bronze IV'), ('silver_1', 'Silver I'), ('silver_2', 'Silver II'), ('silver_3', 'Silver III'), ('silver_4', 'Silver IV'), ('gold_1', 'Gold I'), ('gold_2', 'Gold II'), ('gold_3', 'Gold III'), ('gold_4', 'Gold IV'), ('platinum_1', 'Platinum I'), ('platinum_2', 'Platinum II'), ('platinum_3', 'Platinum III'), ('platinum_4', 'Platinum IV'), ('emerald_1', 'Emerald I'), ('emerald_2', 'Emerald II'), ('emerald_3', 'Emerald III'), ('emerald_4', 'Emerald IV'), ('diamond_1', 'Diamond I'), ('diamond_2', 'Diamond II'), ('diamond_3', 'Diamond III'), ('diamond_4', 'Diamond IV'), ('master', 'Master'), ('grandmaster', 'Grandmaster'), ('challenger', 'Challenger')], max_length=50, null=True)),
                ('lol_last_season_rank', models.CharField(blank=True, max_length=50, null=True)),
                ('lol_honor_level', models.IntegerField(blank=True, null=True)),
                ('lol_champs_owned', models.IntegerField(blank=True, null=True)),
                ('lol_blue_essence', models.IntegerField(blank=True, null=True)),
                ('lol_skins', models.IntegerField(blank=True, null=True)),
                ('lol_level', models.IntegerField(blank=True, null=True)),
                ('lol_rp', models.IntegerField(blank=True, null=True)),
                ('valorant_server', models.CharField(blank=True, choices=[('euw', 'EU West'), ('eune', 'EU Nordic & East'), ('na', 'North America'), ('tr', 'Turkey'), ('me', 'Middle East')], max_length=50, null=True)),
                ('valorant_rank', models.CharField(blank=True, choices=[('unranked', 'Unranked'), ('iron_1', 'Iron 1'), ('iron_2', 'Iron 2'), ('iron_3', 'Iron 3'), ('bronze_1', 'Bronze 1'), ('bronze_2', 'Bronze 2'), ('bronze_3', 'Bronze 3'), ('silver_1', 'Silver 1'), ('silver_2', 'Silver 2'), ('silver_3', 'Silver 3'), ('gold_1', 'Gold 1'), ('gold_2', 'Gold 2'), ('gold_3', 'Gold 3'), ('platinum_1', 'Platinum 1'), ('platinum_2', 'Platinum 2'), ('platinum_3', 'Platinum 3'), ('diamond_1', 'Diamond 1'), ('diamond_2', 'Diamond 2'), ('diamond_3', 'Diamond 3'), ('ascendant_1', 'Ascendant 1'), ('ascendant_2', 'Ascendant 2'), ('ascendant_3', 'Ascendant 3'), ('immortal_1', 'Immortal 1'), ('immortal_2', 'Immortal 2'), ('immortal_3', 'Immortal 3'), ('radiant', 'Radiant')], max_length=50, null=True)),
                ('valorant_level', models.IntegerField(blank=True, null=True)),
                ('valorant_last_season_rank', models.CharField(blank=True, max_length=50, null=True)),
                ('valorant_points', models.IntegerField(blank=True, null=True)),
                ('valorant_radiant_points', models.IntegerField(blank=True, null=True)),
                ('valorant_agents', models.TextField(blank=True, null=True)),
                ('valorant_skins', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AccountImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='account_screenshots/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screenshots', to='base.account')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('icon', models.ImageField(default='client_icons/default.png', upload_to='client_icons/')),
                ('vpn_country', models.CharField(blank=True, max_length=100, null=True)),
                ('wallet_balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='client_groups', related_query_name='client', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='client_user_permissions', related_query_name='client', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='account',
            name='buyer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accounts_bought', to='base.client'),
        ),
        migrations.AddField(
            model_name='account',
            name='seller',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts_selling', to='base.client'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_received', to='base.client')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to='base.client')),
            ],
            options={
                'unique_together': {('reviewer', 'reviewed_client')},
            },
        ),
    ]
